Asynchronous programming allows the user to decide what elements of the code need to be run, instead of requiring a specific order.	5	
We want to use asynchronous programming in Javascript as we want to update parts of the webpage without having to reload the whole page Through AJAX, we can send, request and receive data from a server without blocking the rest of the interface. This is better than synchronous Javascript wherein we can only update the page by reloading it and wherein all the event handling takes place in a single loop.	3	
Asynchronous programming in Javascript allows us to change a page and make calls to the server without reloading the entire page.	0	
Asynchronous programming allows for updating a page without refreshing the whole page. Also, long-running functions can be executed without blocking the rest of the code and interaction.	7	
We want to use asynchronous programming in Javascript because it allows the program to run more efficiently as it will run other tasks while waiting for a response from something else. The application can send, request, and receive data from a server without blocking the rest of the interface from loading. 	3	
We want to use asynchronous programming in JavaScript when we have a promise that we are waiting to be resolved and we want to run other operations in meanwhile. It allows us to efficient and responsive web applications and prevent lag due to a request.	3	
Asynchronous programming in Javascript allows us to be able to do only a partial page refersh instead of an entire page refresh when altering an element. It also allows us to send and recieve data from a server without blocking everything else.	0	
It allows us to run long execution time programs without making the user wait for the program to finish before using the webpage. 	1	
For updating the web page partially, based on an asynchronous process like a web server api call, without reloading the whole page. It makes the user experience faster because it's only changing the visual elements that need to be changed. Reloading fully will use more resources and time. 	0	
– Change a page without reloading it – Send, request and receive data from a server without blocking the rest of your interface	2	
Asynchronous programming is non-blocking, allowing for code to execute in response to a user without blocking or pausing the entire UI. This is quite useful for making web requests that have delay, letting the user still use the interface while a web request is busy.	5	
We want to use asynchronous programming in javascript because it allows us to wait for requests that may take a lot of time such as HTTP requests without needing to interrupt the user's viewing of the web page. 	3	
 AJAX allows us to partially update a page without refreshing the whole page. It also allows executing instructions that may take a really long time (e.g. waiting for HTTP responses) without blocking the rest of the code, so users may still interact with the UI. 	0	
We want to use asynchronous programming in Javascript because our web applications often have to wait for data to be loaded into the program. Often, it is the case that programming in Javascript attempts to fetch some data. In this process, we don't know how long it will take for the data to be fetched. We don't want to block the user from interacting with the application while the data is being fetched, so we take advantage of asynchronous programming to allow the user to continue to interact with the application until the data is loaded.	3	
The main benefit of asynchronous programming in Javascript is that you can run multiple tasks to be run at the same time without stalling other ones. For example, this means that you can render a certain thing while waiting for another thing to render instead of waiting for everything to load before loading the webpage.	9	
We want to use asynchronous programming in JavaScript because it allows us to write code that is more efficient, responsive, and scalable. With asynchronous programming, we can write code that can perform multiple tasks concurrently, without blocking or halting the execution of the program. This means that our code can continue to run and respond to user input, even if some tasks take a long time to complete.	3	
We would want to use asynchronous programming in Javascript when we need a program to execute multiple things concurrently. For example, this allows us to process an event while still listening for new events in Javascript. It also allows us to perform a task that might take a long time while still responding to other tasks instead of just waiting for that long task to end.	3	
we want to use asynchronous programming in javascript because it allows a program to perform more than one task concurrently without the blocking or halting of execution. The usage of asynchronous programming techniques in Javascript allows developers to ensure that the user interface remains responsive and interactive even when operations that take a long time to run are performed in the background. 	3	
Because sometimes you would want to execute other functions while waiting for one function to finish.	4	
We want to use asynchronous programming in Javascript so that we can have events happen at certain time intervals and when certain interactions happen. For example, an event listener can call a function when a button is pressed or setInterval() can repeat a chunk of code over and over after a set amount of time. These are both useful for website interactions. 	3	
We want to use asynchronous programming in Javascript because since Javascript can modify UI, asynchronous programming would allow code to be sent and receive without blocking the UI. 	3	
Asynchronous programming is especially important in interactive designs so that a page can stay responsive to a user's input. Even when a certain program is taking a particularly long time to execute, other parts of code can run in parallel to allow a user to keep using said page.	7	
It helps change a page without having to reload it and you can send, request, and receive data from a server without blocking the rest of your interface.	2	
you can run a long task in the background and the program will be able to respond to other user events. Won't be bottlenecked and waiting until the task is finished.	4	
Asynchronous programming allows you a better interface since you are able to send, request and receive data from a server without it blocking the interface. This allows you to change a part of a page without reloading it.	7	
Asynchronous programming in javascript allows us to communicate with a server while simultaneously running the interface. It also allows us to update pages without having to reload them.	0	
Asynchronous programming is a way for a program to run a potentially long-running task and still be responsive to other events while that task runs, rather than having to wait until that task has finished. This is especially important in Javascript because it is a single-threaded language, meaning that only one task can be executed at a time. Asynchronous programming allows multiple tasks to be performed simultaneously, improving the performance and responsiveness of various web applications. Additionally, it enables JavaScript applications to interact with external resources, such as databases or web services, without blocking the main thread, which would otherwise make the user interface to freeze.	9	
We want to use asynchronous programming so that we do not get slowed down by instructions that take a long time to return, such as fetching data from an API, which ensures that users can still interact with the user interface.	5	
We want to use asynchronous programming in Javascript because it allows the program to start other tasks while maintaining a responsiveness to other events. It allows for multiple tasks to run while a user is interacting with the page.	3	
We want to use asynchronous programming in Javascript to the user is able to interact with and update the page without having to refresh.	0	
Asynchronous programming can be useful for a front end language such as Javascript, because these front end languages often interact with APIs or other elements of the internet in which response times are uncertain. Using asynchronous programming, we can wait the proper amount of time, and execute code upon receiving the information we need.	3	
Asynchronous programming in javascript is useful because it allows the javascript program to not be blocked on a potentially long task such as waiting on an API call. The 	9	
When writing web apps, we often read and write to a server which takes time. To make sure each function has completely finished running, we need to wait for each function. Otherwise, if we execute in real time (synchronous) we may not get desired output.  As an example, consider an app that writes a to-do list to a server. We want to add an item to the list and then print the list. Adding an item may take more time than printing. So, if asynchronous programming is not used the list that is printed will be the list before the new item was added which is not the desired output.	4	
asynchronous programming provides us with a way of running tasks and methods in parallel and/or without caring about how long the execution will take. Basically we are able to call a function and provide a callback function that will be called after it has been executed. So the system can call a task (potentially long-term task), and be able to stil be responsive to all other events or button clicks, instead of waiting.  This provided the programmer the ability to load many different components of the webpage all at the same time. because HTML rendering may take a different amount of time then the API call to get the data, and the first API call might take a different amount of time then the other ones. There are so many things happening that being about to send off an asynchronous call keeps the screen from freezing up and allows the process to flow smoother.	5	
We use async programming when we need to compensate for time delays and promises that need to be resolved, especially for example when interacting with APIs. We can also use this for parallelizing different processes,	5	
Asynchronous programming allows for multiple tasks to be carried out simultaneously, without blocking or delaying the execution of other tasks. It can help us make more efficient processing of data, allowing our app to handle larger amounts of data and traffic.	8	
We want to use asynchronous programming in Javascript because it allows the page to change without reloading the entire thing. In synchronous programming, any small change involves the entire page to need a reload. However, with asynchronous programming data can be loaded from the server and selectively update parts of a webpage	3	
AJAX allows us to partially update a page without refreshing the whole page as well as execute instructions that will take an unknown amount of time without blocking the rest of the code.	0	
Using asynchronous programming in JavaScript allows the user to seamlessly navigate the program without running into any delays or errors. This is because asynchronous programming allows certain processes to run in the background while users continue to do other tasks. Additionally, asynchronous programming allows coders to segment their code into smaller sections for a more organized and efficient workspace.	9	
We use this type of programming in JS to allow other functions to run if some other function is taking too long to complete. This allows other programs to run while the bottleneck apps run in the back. Can run tasks in parallel without delay or lag. 	3	
We use asynchronous programming because it allows send, request, and receive data from a server without blocking the rest of your interface. Along with this it also allows executing instructions that may take a really long time (e.g. waiting for HTTP responses) without blocking the rest of the code, so users may still interact with the UI.	5	
Async programming in Javascript allows us to partially update a page without refreshing the whole page. It also lets us execute instructions that may take a longer time without blocking the rest of the code.	0	
We use asynchronous programming to prevent the program from waiting for a long-running process that the program can wait for separate to the execution of the rest of the program. The best example of this is in Javascript regarding the fetch API that returns a promise which we can specifically wait for to act upon once the actual API response has been returned to the program. 	5	
Asynchronous programming in Javascript allows a potentially lengthy task to begin execution without freezing the program while waiting for completion. This allows for other edits or for responsiveness while the task is awaiting completion, rather than waiting until the task is finished to proceed. 	9	
We want to use asynchronous programming in Javascript because it allows multiple tasks to run at the same time, without interfering with the execution of the rest of the program. This is important in JavaScript because the language can only execute one task at a time. With asynchronous programming, you can improve performance and efficiency of your program while also preventing it from becoming unresponsive.	3	
If we use asynchronous programming in JavaScript, we gain the ability to move over to different tasks even while the others are still being executed, essentially giving the user the ability to handle more than one request simultaneously.	9	
Asynchronous programming helps us to send, request, and receive data from servers without blocking the rest of the interface. This way we can parallelly perform many tasks. It lets us partially update a page, execute long instructions, and run more minor instructions on the side.	8	
Asynchronous programming helps you wait for one task to finish before starting another task	8	
We want to use asynchronous programming so that we can display information to the user even while waiting for a response from an AJAX call. This allows us to not pause the flow of the website when we need to wait for information to be received. 	3	
Asynchronous programming in Javascript allows the program to perform multiple tasks at the same time without waiting for any individual task to be completed. The program will be responsive to other events while a long-running task is being completed. This makes the application more responsive and user-friendly since the user doesn't have to wait for an event to be completed before completing other actions.	9	
It allows the program to start a potentially long-running task and still be able to be responsive to other events while that task runs, rather than having to wait until that task has finished so essentially it's more time-efficient.	6	
Asynchronous programming in Javascript allows for code to execute while we're waiting for certain things to happen like fetch requests and promises. This helps speed up how long it takes for the page to execute and overall performance. 	9	
It allows us to make changes to pages without reloading. Additionally, we can send, request, and receive data from our server without interrupting or blocking the rest of our interface. 	2	
We would want to use asynchronous programming in Javascript because it enables users to change the page without reloading the entire page. Also, you can send, request, and receive data from a server without blocking the rest of your interface.	0	
Asynchronous programming allows different tasks to be run simultaneously, resulting in more efficient and responsive applications.	8	
Asynchronous programming allows a program to start a potentially long-running task and still be able to be responsive to other tasks while that task runs. This allows us to change a page without reloading it and to send, request, and receive data from a server without blocking the rest of the interface.	7	
Asynchronous programming in Javascript allows for multiple benefits. One thing is a javascript program can start multiple tasks at once rather than perform each function one by one. This allows for an increase in responsiveness in web applications. 	9	
Asynchronous programming allows to partially update a page without refreshing the whole page. It also allows for executing instructions that may take a really long time without blocking the rest of the code, so users are still able to interact with the UI.	7	
Because it allows other code to run and for the user to continue using the page while other instructions are executing that may take a long time, like waiting for an HTTP response	1	
Asynchronous programming allows for the execution of tasks that run for a long time without the restriction of blocking the execution of the rest of the code. This is useful in JavaScript because its only one task can be executed at a time as a single-threaded language. With asynchronous programming, long-running tasks, Like an API calls or file input/output operations, can be done in the background while the rest of the code continues to run without blocking the main thread. Altogether, this contributes to improving overall performance and responsiveness of the JavaScript application	9	
We want to use asynchronous programming in Javascript because it allows the webpage to continue being used while there is a long action going on, it makes it so the whole page does not freeze if something is taking a long time.	3	
Asynchronous programming is useful because it allows a flow of logic to be consistent during fetch requests/promises, which would otherwise cause errors if the code didn't halt during these requests. In other words, fetch requests have variable return time, so its important to wait for the response before moving forward.	5	
Without JavaScript, we can only update a page by reloading them. However, even with JavaScript, all event handling runs in a single loop. Asynchronous programming enables a user to change a page without reloading it. It also ensures that we can send, request, and receive data from a server without blocking the rest of the interface.	0	
 Asynchronous programming in Javascript allows us to partially update a page without refreshing the whole page and allows executing instructions that may take a really long time (e.g. waiting for HTTP responses) without blocking the rest of the code, so users may still interact with the UI. 	0	
We want to use asynchronous programming in JS because it allows executing instructions that may take a really long time without blocking the rest of the code, allowing users to still interact with the UI. It allows systems to run more effectively. 	3	
Asynchronous programming is needed as we want the user to still be able to interact with the website when code in the background is being executed. It is also useful for when calling data from an API. We want the data to come when ready but to not freeze the entire application.	5	
It allows us to update parts of a webpage at a time in order to handle requests to/from servers and avoid having to re-render the entire page.	1	
We want to use asynchronous programming in javascript because it allows us to execute potentially long instructions without blocking the rest of the code and also be able to partially update a page without refreshing the whole page. 	3	
Asynchronous programming allows for sending, requesting, and receiving information from a server without halting or pausing the program.	5	
We want to use asynchronous programming in Javascript so that the front end user interface still allows for user interaction while waiting for the javascript code to return or finish executing.	3	
Asynchronous programming helps the system run more efficiently and faster and helps to avoid wait times. If we did not use Asynchronous programming, applications would run much slower as they would be waiting real time.	8	
Asynchronous programming allows us to partially update an area on the page without refreshing the entire page. This is useful because it can execute instructions that may take a really long time without blocking the rest of the code, so users can still interact with the UI. 	7	
Asynchronous programming allows the interface to load elements while it runs some code which might take longer. For example, an entire webpage can be generated even if something at the top. takes a while to run. Synchronous programming would require everything to be finished running before the webpage was generated.	7	
Asynchronous programming in JavaScript allows us to run multiple operations simultaneously, without having to wait for one operation to complete before another can begin. This allows us to execute more operations in less time, and to make a more responsive and efficient application.	9	
We want to use asynchronous programming in Javascript to change a page without reloading it.	0	
Because it allows javascript code to run with out having to wait for other pieces of code to finish	4	
It allows us to update only part of the webpage instead of reloading the entire page. It also prevents the execution of the programming from blocking if certain processes are taking too long to execute.	1	
We want to use asynchronous programming in Javascript because it allows us to start long tasks while doing other things at the same time so that we do not have to wait for the first task to finish executing	3	
Asynchronous programming makes it possible to express waiting for long-running actions without freezing the program during these actions. Asynchronous loops are necessary when there is a large number of iterations involved or when the operations within the loop are complex. 	4	
Asynchronous programming makes it possible to be waiting for actions that take longer without stopping the program while these actions are executing. 	4	
Waiting for HTTP response can take a lot of time. Asynchronous programming allows the code to be executed in a non-blocking way. The program can continue execution while waiting for the response asynchronously, which can save a lot of wait time for users.	5	
We should use asynchronous programming because while the user or the system (client) makes a request to the server, the user can still interact and use the interface while their system waits for a response from the server. Additionally, asynchronous allows multiple requests to happen at the same time, for example, if the user requested from the ITunes API and then wanted to request from the Slack API, they would be able to while waiting for a response from the ITunes API.	5	
We want to use asynchronous programming in JavaScript because it does not block synchronous processes from occurring. It also enables us to do things like change pieces of a page without reloading the entire page, request data from the server after the page has been loaded, receive data from the server after the page has been loaded, and send data to the server in the background without disturbing the UI or other processes. 	3	
Asynchronous programming allows us to make changes and updates to the page without refreshing. It also allows us to execute instructions that may take a long time without getting in the way of the rest of the code in our interface. This allows users to still work with the UI while those instructions are running.	7	
This allows for multiple tasks to run at the same time.	6	
You want to use asynchronous programming in Javascript so that you can update a page without needing to refresh it entirely, as well as to allow users to execute time consuming code without halting the rest of the program. Thus, due to asynchronous programming users can interact with the program even when some code takes a long time to run.	0	
We want to use asynchronous programming in Javascript because it allows us to update certain elements of a page without reloading the whole page and to continue interaction with the UI while background processes are going on/loading.	3	
Asynchronous programming enables a program to start a potentially long-running task and still be able to be responsive to other events while that task runs, rather than having to wait until that task has finished. This is beneficial, as we are able to change a page without reloading it as well as send, request and receive data from a server without blocking the rest of the interface.	7	
Asynchronous programming in Javascript is used when the developer would like to be able to update certain parts of a page without having to reload the entire page.	0	
By using asynchronous programming, we can start a long running task and still be able to be respond to other events while that task runs. This way, we don't have to wait until that task has finished.	8	
This will allow users to continue to use your website/app, while you work on parts of the website while not interfering with traffic to your website.	1	
Asynchronous javascript programming can be used to effectively handle potential blocking operations, such as fetching resources from a server.	3	
So we can reload data from the server and selectively update parts of a web page without reloading the whole page. It also prevents us from blocking the rest of the interface while waiting for the data.	2	
Asynchronous programming allows a program to perform multiple tasks in the background without blocking or delaying the UI.	8	
Sometimes, there can be code that runs very slowly which blocks the execution of the program. As a result, users can’t do anything during this. Asynchronous problem allows you to still be able to be responsive to other events while that task runs, rather than having to wait until that task has finished.	4	
It allows users to interact with the UI while large instructions get executed. It also allows pages to be partially updated without getting refreshed entirely.	1	
Asynchronous programming in Javascript allows the program to continue running and to execute other tasks while waiting for a long-running operation to complete. It also allows us to change a page without reloading it and also send, request and receive data from a server without blocking the rest of your interface.	0	
It's important to be able to perform a task that has to wait without pausing the rest of the program.	4	
It allows the executing of instructions that take a really long time (HTTP requests), without stopping the rest of the code from running.	1	
Asynchronous programming allows us to partially update a page without refreshing it. In particular, it allows for the execution of instructions that may take a long time (e.g. awaiting HTTP responses) without locking the rest of the code. This way, users may still interact with the UI while awaiting these instructions.	7	
Because it allow us to modify the website without having to send the data every time a change is made	1	
It changes the page without reloading it and can send, request and receive data without blocking the rest of the interface	2	
Asynchronous programing allows us to start tasks that may take a long time and remain responsive to other tasks while that initial task is running. The whole system won't shut down while a task is performing.	8	
We want to use asynchronous programming because it lets us update part of a page, which is helpful if another part of the page is taking a while to load/process, etc. 	7	
It allows your script to call an action that may take a long time to run without having to pause the entire program to wait for it to finish running	6	
Asynchronous programming allows JavaScript programs to perform multiple tasks concurrently without needing to wait for each task to complete before starting the next one. It also allows applications to run more smoothly and respond to user input while other tasks may be performing in the background. It can also improve the scalability of JavaScript applications by allowing them to handle multiple concurrent tasks without overwhelming the system.	9	
Because there are times where we want to continue executing code when we're waiting on a response from something, for example. a fetch request. 	4	
We want to use asynchronous programming in Javascript so that we can control the flow of execution. For example, when fetching a URL in assignment 5, we use asynchronous programming to process the response of the API call (changing it to json and adding the response to a list).	3	
There may be times where we are required to wait for a response from a server, for example. During this time, we still want the user to be able to use other features on a site, without being locked out until a response is received.	1	
We want to use asynchronous programming in Javascript because it allows us to load elements on a webpage as we get them, instead of loading the webpage all at once and potentially having to wait on operations that take a long time.	3	
Because with the amount of stuff we are calling from the server, it might slow down our interface if we try to use synchronous programming	4	
Asynchronous programming is used because it allows the program to execute a task that could take a long time while still being responsive to other events or inputs that occur while the task is resolving.	8	
We can partially update the information or other UI elements on a page based on user interaction, without needing to update the entire page every time an element of the DOM changes or the user interacts with it.	0	
It allows us to perform actions that may take some time while still loading the rest of the UI and letting users interact with it.	1	
Because it allows executing time-consuming instructions such as waiting for HTTP responses without blocking the rest of the code so that users can still interact with the UI.	1	
It will help the users making it possible to express waiting for long running actions without freezing the program during these actions. They mainly do this using callbacks, functions which are called when the actions complete. It helps when there are large iterations involved or when operations inside these loops are very complex to handle.	4	
Async programming is a way to execute other parts of code while we’re waiting for an action to complete. For instance if you’re getting data from a server or database, you need to wait to display that data, but you might be able to create other items, for instance using JQuery in a HTML DOM. Since JavaScript is single threaded, you’re able to do so via async, instead of waiting for it to execute one line at a time.	5	
We want to use asynchronous programming because it allow us to perform long-running task while being able to response to other events that are happening while the task is running, rather having to wait until the task finish running.	8	
Asynchronous programming allows us to perform activities that might take some time, like sending a request to a server and waiting for the response, without blocking everything else in the user interface and having to wait for the response before anything else can happen. It also allows us to change different things on a page without reloading the whole page.	7	
If you have several tasks that you want the application to operate. This allows you to complete multiple tasks at once since it isn't necessary for the application to wait to complete them individually. This can be very beneficial in web dev/user experience when delays can occur.	6	
Because we are able to make things happen at the same time; this way, a longer task won't stop other code from being executed, for example. Conversely, it can also be used as a good way to make things wait to execute until other promises are fulfilled.	4	
Asynchronous programming allows multiple things to happen at the same time. This will allow multiple functions on a page to be happening simultaneously and it is important for basic functioning. 	7	
Asynchronous programming prevents a call to one function from blocking execution of other functions while waiting for a response, so for example a page wouldn't freeze up while waiting for a response from an http request.	5	
It enables you to change a page without reloading it (partial page refresh) and lets you send, request and receive data from a server without blocking the rest of your interface. 	2	
We want to use asynchronous programming in javascript because it can make asynchronous HTTP requests from the browser without having to reload the entire page. Additional it enables the ability to send, request and receive data from a server without blocking the rest of the interface.	3	
We would want to use asynchronous programming because it allows users to still be able to interact with some of the UI elements while the others are still loading. It allows us to have promises.	3	
We want to use asynchronous programming because for synchronous programming if some functions take too long, the user is unable to use certain functionality. However with asynchronous programming, we enable a page to change without reloading it and we are able to send, request, and receive data from a server without blocking the rest of the interface. Additionally, we can add multiple event handlers such that we can give responses to multiple user interactions even if one response function may take too long.	7	
It allows us to build features separately from the primary application thread. You can partially update a page without refreshing the whole page. It allows us to execute instructions without it taking a really long time and blocking the rest of the code.	1	
Asynchronous programming allows the code to execute multiple things at the same time, so we can partially update a page without refreshing the entire page. Thus we can execute instructions that might take a long time (ie. fetching data) while users can still interact with the UI at the same time. 	7	
We want to use asynchronous programming in Javascript because it allows us to update a page without refreshing the whole page. It also allows users to interact with UI, when executing instructions without blocking the rest of the code.	3	
Using asynchronous programming in JS allows code to be run even when the browser is taking  time to load data from the server. Therefore, the code can be run while other data is updating, and partially load the webpage in the meantime.	9	
We want to use asynchronous programming when writing applications with potentially long waits between prompts, like waiting for an HTTP request to return. This allows the application to avoid getting stopped up during waiting periods. 	5	
We want to use asynchronous programming in Javascript because it allows us to express waiting for long running actions without having to free the program during this time.	3	
Asynchronous programming allows us to create dynamic web pages that don't require us to reload the page each time for items to update making pages more responsive and efficient. This is because it allows us to send and receive data from the server without interfering with the rest of the interface. 	7	
Asynchronous programming allows us to organize and structure our code so that we can handle tasks concurrently. Because java script is single-threaded, allowing us to run tasks concurrently will prevent us from preventing our code from running and is overall very reliable and scalable to use.	9	
Asynchronous programming in Javascript allows us to update or change a page without having to completely reload it. Asynchronous programming also allows for updates that take a long time to occur in the background while the user interacts with the rest of the page.	0	
Asynchronous programming allows our program to start tasks that may be very long while still running tasks of other things so we don't have to wait for one after each other.  	8	
We can partially update pages without refreshing it, and we can execute instructions without blocking user input, even if they take a long time to execute. 	1	
Because asynchronous programming in Javascript enables us to carry out numerous activities simultaneously without delaying the rest of our program's execution, we wish to use it. This could enhance the responsiveness and performance of our applications.	9	
This can allow us to continue to provide function to the user while we wait for a data source to come in. Also, it can help with not refreshing the page.	1	
We want to do this so the user can continue using the web page while a background process is being completed. For example, in A5 when we were fetching from the Itunes API,  we wanted the webpage to still be active and have stuff going on, but the fetching was being done in the background. 	4	
Asynchronous programming allows us to not block the rest of the interface when sending, requesting, and receiving data from a server.	5	
It allows one to partially update a page without refreshing the whole page as well as to execute instructions that may take a really long time without blocking the rest of the code, so users may still interact with the UI	1	
We would want to use asynchronous programming in javascript because we can then  partially update a page without refreshing the whole page. It also allows executing instructions that may take a really long time (e.g. waiting for HTTP responses) without blocking the rest of the code, so users may still interact with the UI.	3	
Unlike typical sequential programming languages, we are working in a live production environment where code is not sequential, so we there may be operations that will take a long time, in the meantime we can often afford to do other operations, or sometimes we have to wait for the right value to be evaluated from some server back to us, so we need to use asynchronous programming. 	4	
Make sure the program can respond to other tasks while a long task is running, so that it does not have to wait until that task is finished to begin other tasks.	4	
So we can perform multiple tasks at once and to listen to multiple events at once. For example clicking a button should not interfere or wait for a previous button that I clicked and is still processing.	6	
Asynchronous programming in JS allows your program to load part of a task/webpage while the slower to load portions take their time. 	9	
We want to use asynchronous programming in javascript because in enables us to start tasks and still be able to respond to other events while the first task is still occurring. We don’t have to wait for the first task to complete before we can address the second event. This is great because we can respond to a user action right away and not have to wait for a currently running task to complete before reacting to the user.	3	
It allows us to partially update a page without refreshing the whole page. It also allows executing instructions that may take a really long time without blocking the rest of the code, so users may still interact with the UI	1	
Asynchronous programming is a technique that allows a program to perform multiple tasks concurrently, without blocking or halting execution. In JavaScript, this is useful because it allows the program to continue running and responding to user input, even if it is waiting for a slow operation, such as loading data from a remote server or performing a complex computation. This can improve the performance and responsiveness of the program, and it can also make it easier to write code that handles multiple concurrent events, such as user input and server responses. 	9	
Asynchronous programming allows the page to be updated without refreshing it, which is useful if there is only a small portion of the page that needs to be updated or if the page takes a long time to load. It saves users time.	7	
You want to use asynchronous programming in Javascript to send, request, and receive data from a server without blocking the rest of your interface. You will be able to change a page without reloading it.	2	
We want to be able to use asynchronous programming because some functions (like requesting data from a backend) will have a delay/could take a long time to complete/respond, and with asynchronous programming we are able to account for that and do other functions without busy waiting the whole time.	5	
It allows our program to start a long-running task and still be able to be responsive to other events while that task runs, as opposed to waiting until  that task finishes.	6	
It allows for other tasks to be done while a larger task is processing in the background rather than having a task stop the program.	6	
Without asynchronous programming, we can only refresh pages by reloading them, and javascript handles all events in a single loop. However, sometimes we want to only update a part of a page, and the update may be taking a long time. To address these needs, we need AJAX to send, request and receive data from a server without blocking the rest of the interface, and without reloading the page. 	0	
This is to allow other components when showing the webpage does not get blocked by operations that require long time.	1	
Asynchronous programming is useful because it allows us to partially update a page without having to refresh the entire thing. It also allows for code that may take some time to finish to not be a road block for other code to execute.	7	
Asynchronous programming in Javascript is preferred because it allows for showing that we are waiting for a function to run without stopping the program during the action. This allows for faster loading and a better user experience.	3	
Asynchronous programming allows us to perform multiple tasks at the same time so we don't have to wait for one task to complete before starting another. Instead, we can start multiple tasks at the same time and handle their results when they are ready or clicked on for example. It also allows us to avoid blocking the main thread of our application, so that a task's execution won't be blocked just because another task is taking a long time to complete.	8	
We want to use it to enable our program to start a potentially long-running task and still be responsive to other events while that task runs, rather than having to wait until the task is finished.	6	
We want to use asynchronous programming in JavaScript because we do not want to block the interface while processing a request. If we didn't have asynchronous programming in Javascript, the user would have to wait for code to finish running before being able to use the interface again. 	3	
Asynchronous programming allows requests to be made asynchronously, without blocking other processes. For example, a fetch might take a long time, but users can still interact with the UI and perform other actions while the fetch is being made.	5	
It allows partial updates of a page. It also allows users to continue to use the UI without having slow functions block the entire UI.	1	
This allows us to perform multiple tasks at once without blocking the execution from a different task. 	6	
Rather than having to reload the entire page and all of its contents when receiving new information into the browser, we can utilize asynchronous programming to run in the background so that we can update parts of a page while maintaining the continuous running of the page as a whole.	0	
It can change a page without reloading it. and It can send, request and receive data from a server without blocking the rest of the interface.	2	
It enables changing a page without reloading it and it allows us to send, request, and receive data from a server without blocking the rest of the interface.	2	
We would want to use asynchronous programming in Javascript because it allows us to send and receive data from a server without interfering with the running code and it enables changing a page without having to reload it.	0	
Asynchronous programming in Javascript allows us to update parts of the page without refreshing the entire page. Moreover, it gives us more efficiency by allowing us to execute instructions that may take really long while running things that come after it, so the program may proceed. 	0	
We want to use asynchronous programming in Javascript whenever we want to change a page without reloading it or sending, requesting, and receiving data from a server without blocking the rest of the interface. This lets the user run long execution tasks.	0	
Asynchronous programming allows us to change a page without needed to reload the entire page.	0	
Asynchronous programming is used such that we are able to request and receive data from a server without having to worry about a delay blocking access to the rest of the program/app/website.	5	
Asynchronous programming allows us to be able to send, request, and receive data for parts of a webpage as opposed to the whole page each time. This reduces the amount of latency in the network of the servers on which our web applications run.	7	
Because we may want to change a page without reloading it or send, request and receive data from a server without blocking the rest of your interface. For synchronous JavaScript, all event handling runs in just one single loop	2	
In web programming with javascript, not all information to be displayed on a page will be available at the same time. For instance, information fetched from another source using the internet may take some time to load. With asynchronous programming, we can load the rest of the page and update it later (such as when a fetch returns) without needing to reload the whole page - only parts of it.	3	
Asynchronous programming in Javascript is useful when we want to update a part of the page without refreshing the whole page. It's also helpful when you want to execute a part of the code that can take a long time, without having to hold up the rest of the code, so that users can still interact with the page in the meantime.	9	
Asynchronous programming is something that is useful in Javascript because it allows for the code to run multiple tasks at the same time.	9	
Asynchronous programming allows us to start a long-running task and still be responsive to other events. The key advantages include being faster and more responsive.	8	
We want to asynchronous programming so we do not have to wait for the task to finish before running another task. A program is able to run a task while still being responsive 	8	
Asynchronous programming allows us to run multiple tasks at once so the system does not become bogged down when one task takes a long time.	8	
Allows the program to start long/expensive running function while still being responsive to other tasks (i.e handle clicks) without blocking and having to wait. Leads to a better user experience	6	
It allows us to execute instructions that take a long time or that run continuously without blocking other instructions and refresh part of a page instead of the whole thing	1	
There are several reasons why we want to use asynchronous programming.  First of all it enables us to change part of the page without reload the whole screen. Secondly, it enables sending, receiving and processing data from server which might take a long time without blocking other functionalities of the webpage. It is needed because there is always latency in the network. 	7	
We need asynchronous programming because web applications run on a server and there is latency in the network. In this case, async is really useful because other code can be execute while we are waiting. 	5	
The single-threaded nature of the language means that long-running or blocking operations can cause the browser to become unresponsive or crash. By using asynchronous programming, you can ensure that your code runs smoothly and efficiently, even when dealing with complex or time-consuming tasks. Additionally, asynchronous programming can help you to write more modular and scalable code, which can make it easier to maintain and update your applications over time.	9	
Asyn calls can change a page without reloading it. Also it can send, request, and receive daa from a server without blocking other codes in the interface.	2	
We don't have to wait a task to complete. Instead, it allows us to perform other tasks while waiting, which improves efficiency.	6	
Asynchronous programming allows us to set, request, and receive data from a server without blocking the rest of the interface. It also allows us to change and update a page without having to reload the whole thing.	7	
We don't want to shoehorn the users into a specific route on the application, we want them to be able to click any button at any time, and this can only be achieved through event listeners and the like which are examples of asynchronous programming.	4	
We use asynchronous programming in javascript because we want to wait load data and prevent waiting without reason.	3	
Asynchronous programming in JS allows us to change a page without reloading it, and also send, request and receive data from a server without blocking the rest of your interface. Solves the issues of synchronous programming, cuz promises and stuff.	0	
Asynchronous programming allows our program to complete long running tasks and still respond to other events while it is doing so.	8	
Allows you to start a task that might take a long time and in the meantime still be responsive to other tasks while that first task is still running. So basically, you don't need to wait for the first function to finish before doing something else.	6	
We want to use asynchronous programming in Javascript so that we can write programs that can send and receive data from an external server without having to refresh/block the interface.	3	
We want to use asynchronous programming in Javascript because it allows users to continue to interact with a web page while a long-running task is still being executed.	3	
Because sometimes we are in a situation where a line of code may take an indefinite amount of time (like an API fetch), and we don't want to block the whole program while running it, so we run it asynchronously. And if we want to wait for it to complete before running certain other lines, we can use mechanisms like .then()	4	
Asynchronous programming in Javascript allows us to change web pages without having to reload the entire page each time. This is helpful because there may be many features within a page that change based on timing/user input, and it is inefficient to have to do this each time.	0	
Programming asynchronously allows us to run multiple Javascript tasks at the same time without of the tasks blocking the others. 	9	
Asynchronous programming in Javascript is used to prevent the execution of code from blocking other code from running. This is important because Javascript is a single-threaded programming language, which means that only one piece of code can be executed at a time. If code tries to execute before the page is finished loading, we can run into problems. In Javascript, we can use document.ready() to combat this.	9	
We want to use asynchronous programming in Javascript if we are getting elements from somewhere else on the internet (I.E. the iTunes API) and want to ensure that the program will still work while that information is being fetched, and define what happens after it has been fetched.	3	
Asynchronous programming is used so that the website/program can continue to run while we wait for the function call to resolve, this is helpful as there are many parallel tasks one can encounter in web programming.	5	
With asynchronous programming, we can start a long-running task and still be responsive to other tasks while that one is running.	8	
We want to use asynchronous programming in Javascript so lines of code execute in a specific order and ensure it is executed based on previous results. For example, when calling an API, we want to use asynchronous programming for the code to wait for the data to be returned before working with the data.	3	
Asynchronous programming in javascript allows us to perform more than one task at a time without blocking execution of the other tasks. 	9	
We would want to use asynchronous programming to reduce the average waiting time for operations where other work can be done while waiting for a response or for another process to return. 	5	
Asynchronous programming allows us to have a page that is responsive to other tasks, even when a long-running task is running. That way, we don't have to wait until a task finishes running to do anything on the page.	7	
We can execute functions in the background of a page and update sections of the page without reloading all of the contents.	0	
We can change a page without having to reload it with asynchronous programming. We can send, request, and receive data from a server without blocking the rest of the interface.	2	
We want to use asynchronous programming in Javascript because it allows us to change the page without reloading it as well as send, request and receive data from a server without blocking the rest of your interface.	3	
We want to use asynchronous programming in Javascript so that we do not have to wait on functions that take a long time like functions that query servers, when there are other functions that can be executed without the stalling function being returned. 	3	
When using a fetch, the Javascript code will run simultaneously with or without the results of the fetch adequately registered. Asynchronous programming ensures that all code after a fetch ensures that the fetch is complete and therefore the relevant data from the fetch is properly processed.	5	
Its useful as multiple parts of the application can be executed without having to wait for one another, which is especially important in making requests for servers or waiting for complex tasks to load. It also allows you to change a page without reloading it.	1	
Asynchronous programming allows us to dynamically update part of a page without refreshing the entire page. It also lets us execute instructions that take longer at the same time as other code, so users can still use the website normally.	7	
We want to use asynchronous programming in Javascript so that we can start tasks that might take a while to run or return a response and still be able to respond to other things while that task runs instead of waiting for it to finish.	3	
sometime the response takes time and we would like the user to still interact with part of the page.	1	
Asynchronous programming in Javascript enables us to start a potentially more time consuming task, and still be able to render / respond to other events despite the task still running, rather than having to wait until that task (such as an API call) to be finished.	9	
Asynchronous programming allows us to update specific parts of web pages, for example, whilst keeping other parts the same. This creates more responsive and efficient applications. 	7	
Asynchronous programming allows the program to continue running and responding to user input without having to wait for other tasks to complete. For example, we can fire off an api call and not have to halt the execution of other tasks because we can use asynchronous programming to run this api call concurrently with the other tasks.	8	
Asynchronous programming allows web pages to have partial reloading for information. Basically, for certain information or events that potentially can take a long time or break, such as server requests, asynchronous programming allows us to perform those events without halting the rest of the page or stopping other significant events from happening. 	7	
Asynchronous problem allows you to run one task and still be able to be responsive to other events while that task runs, rather than having to wait until the other task is finished 	8	
Change a page without reloading it Send, request and receive data from a server without  blocking the rest of your interface 	2	
The reason we want to use asynchronous programming in Javascript is so that we can render objects onto the page only once they are in a state that is ready to be rendered correctly. Moreover, asynchronous programming allows the partial parts of the page to update and allows executing instructions that may take a long time (fetching resources) without blocking the execution of the rest of the code so users can still interact with the UI.	9	
Asynchronous programming allows us to change some parts of a page without reloading the entire page. It also allows executing instructions that may take a really long time without blocking the rest of the code, so users may still interact with the UI.	7	
Asynchronous programming is good because we want to partially update a page without refreshing the whole page and allows for executions that take a long time without blocking the rest of the code. This way, users can still interact with the rest of the code.	7	
We want to use asynchronous programming in Javascript so that functions that take a long time to execute does not block execution of other functions. For example, a fetch request might take a long time to execute and the user should be able to cause executions of other functions in a web app while the fetch executes for a good user experience. 	3	
We want to use asynchronous programming in Javascript because it allows us to change a page without reloading it so that we can send, request, and receive data from a server without blocking the rest of the interface. In some instances, it makes it easier to code and implement.	3	
Asynchronous programming allows programs to perform multiple tasks at the same time. It allows the program to continue running even if one task is taking a long time to complete., as the program can complete other tasks in parallel. 	8	
Asynchronous programming allows multiple tasks to be executed concurrently, and not blocking the main execution thread.	8	
asynchronous programming is better because we can start long tasks and still be responsive to other events without having to wait for other tasks to end first	8	
It enables a program to execute potentially long-running tasks and be responsive to other tasks while it is running. 	6	
Asynchronous programming allows us to create more responsive and efficient applications while also allowing them to run multiple tasks simultaneously. In delays, other tasks can still function.	8	
It allows for us to process long running tasks and still be responsive to other events while that task runs, rather than everything being halted while that one task is going	6	
We use asynchronous programming in Javascript because it allows our program to start a task that may take a long time, while still being able to respond to other events while the first task is running.	3	
Asynchronous programming allows us to continue executing functionality while waiting for backend requests to be fulfilled. Often times, these requests take time, so it is important for us to have the ability to continue to execute other code while waiting for a promise to be fulfilled.	5	
async programming allows us to run tasks simultaneously and have them execute at desired times. 	8	
Asynchronous programming allows for designs and interfaces that require updating though don't want to have to refresh the entire page. It allows the execution of instructions that take a long time while allowing users to still interface and interact with the rest of the UI.	7	
With asynchronous programming in JS, the program can continue to handle input and updating pages while long-run executing in the background.	0	
When we are doing I/O functions, we don't want to block the rest of the UI by waiting on that I/O. With async we can do work in the background and still have the UI be functioning while waiting for the I/O to finish.	4	
Asynchronous programming allows us to update parts of the page without updating the entire page. Additionally, we can execute code that may take a while simultaneously as other operations. Ultimately, it creates a more seamless experience for users and lets them interact with other elements while some are loading. 	7	
We want to use asynchronous programming in javascript since it helps speed up processes if we wanted multiple things to be run. Since there are some functions that might require a response ie. waiting for a server to return some sort of information, asynchronous programming allows for us to execute other pieces of code or other functions while waiting for such responses. 	3	
Because you want to be able to run code in the background without blocking the user interface	1	
To be able to execute other tasks while a task is still running in the background. It can be very useful for running concurrent tasks and therefore not having to wait for one task to finish before moving on to other tasks. 	6	
We are able to take advantage of the functionality as it allows us to express waiting for certain actions without stalling the program. As many programs interact with users, this becomes essential. It allows the parts of the program that don't require input to continue and improves efficiency. 	1	
When working over different networks to get information, there is sometimes a lag in receiving information. Rather than waiting for the information, which would result in a lag in the program, using asynchronous programming allows for the program to continue while waiting for the information.	4	
An example of why asynchronous programming is helpful is because it allows a user to key doing other things while other information may be loading on the page. Without asynchronous programming you'd have to reload the entire page to update it. Asynchronous programming allows multiple tasks in code to be completed at once because it does not have to wait for one request to be done before moving onto the next.	7	
We would want to use asynchronous programming to allow different functions to run simultaneously. This way, we can send, request and receive data from a server without blocking the rest of the interface.	5	
We want to asynchronous programming when we want to change part of a page without reloading it and also allows for sending, requesting, and receiving data from a server without blocking the rest of the interface. This allows tasks to be performed concurrently and allows instructions that take a long time to be executed without affecting other parts of a program. 	7	
Asynchronous programming in Javascript allows for multiple tasks to be executed concurrently, which can improve the performance and responsiveness of applications.  For example, if an application needs to retrieve data from a remote server, it can use asynchronous programming to send the request and continue with other tasks while waiting for the response. This prevents the application from becoming unresponsive while waiting for the data.	9	
We want to use asynchronous programming in Javascript because it allows you to change a page without reloading it. It also allows you to send, request and receive data from a server without blocking the rest of your interface.	3	
This way you don't have to wait for things to happen to update other separate parts of a webpage/app.	1	
Asynchronous programming in Javascript allows your website / program to start a potentially long task without having to completely shut down. It can still work on other parts of the program in the meantime. This is a useful feature for, say, an API call, which we do not know how long it might take to respond.	9	
Asynchronous programming makes it easier to create programs that can run multiple operations at the same time. Also, asynchronous programming allows for the program to continue running while waiting on another operation to finish. This allows for faster and more responsive programs.	8	
Asynchronous programming allows the program to represent data that is not yet retrieved while still executing other portions of the code. This increases the efficiency and allows javascript to work well with rest apis.	5	
Asynchronous programming allows for us to partially refresh the page rather than a full refresh and allows instructions that may take a long time to execute without blocking the rest of the code.	7	
Asynchronous programming allows the program to continue running while a piece of code waits for its callback function to be called. For example, an API request using fetch.	5	
Asynchronous programming in Javascript can improve the performance and responsiveness of our application by allowing multiple tasks to be performed concurrently, thus resulting in a more user-friendly interface. 	3	
Sometimes, fetching data from the web can take a long time. We want our code/website to still be able to work whilst waiting for this response. Asynchronous programming allows us to do this.	5	
We want to use asynchronous programming in Javascript because it allows us to run asynchronous tasks in the background while the main thread continues. For example, we can wait for the user's click on a specific button without halting other operations.	3	
We want to use asynchronous programming in Javascript because this allows us to send, request, and receive data from a server without blocking the rest of our interface, especially in client-server network communication.  	3	
Asynchronous programming in Javascript is great because it allows our program to start a potentially long running task, but still be able to be responsive to other events while that task is running. We don't have to wait until the task is done!	3	
We use asynchronous programming sowe don't need to refresh the page everytime the user makes a request. It also allows you to update only part of the page at a time rather than the entire page. On top of that, it helps us handle cases where the request might be large and/or take a long time.	0	
It allows the page to be partially refreshed. Since Javascript allows users to change which lines of code are called when, sometimes the program will want to continue running while waiting for a response from the user. 	1	
It allows us to partially update a page instead of needing to reload the page every time an action is done. It also allows users to continue to use the page while a long action is being done asynchronously.	1	
Asynchronous programming allows for a website to update with new information without refreshing the entire page	0	
We want to use asynchronous programming in JavaScript because asynchronous programming is a technique that allow many tasks to run concurrently without interfering with the main thread of operation. Which means that the program may continue to operate and react to user input even if one or more activities are still running in the background. Therefore, this can improve the program's responsiveness and performance, especially when numerous time-consuming tasks are in progress.	3	
Some resources can take some time to load, but we might not need them to be loaded in order to perform some other bits of code. Instead, we can use asynchronous Javascript to execute unrelated code while resources continue to load in the background. Asynchronous programming is especially important when it comes to loading pages on the internet, since fetching resources from other servers/URLs can take time.	0	
Asynchronous programming allows us to partially update a page without refreshing the whole page and prevents us from waiting a long time for executing instructions and  blocking the rest of the code, so that users may still interact with the UI.	7	
We want to use asynchronous programming in javascript in order to not freeze processing when we are waiting on executions. For example, making a call to an api - we don't want the user to have to wait for this! 	3	
Some events, such as network requests, take lots of time due to network latency and we don't want these to block the execution of the rest of our program. Therefore, we perform them asynchronously.	4	
We want to use asynchronous programming in javascript because it allows us to use callbacks, which makes it such that when running long tasks, it does not freeze the rest of the program being used. For example, a webpage would be able to refresh itself rather than waiting for a user to refresh the page after a change. This is why we use AJAX.	3	
Asynchronous programming allows a program to perform multiple tasks simultaneously without blocking the execution of other parts of the program. This improves both the performance and responsiveness of the program.	8	
We want to use it because we dont want the website to stall and block execution of other tasks when trying to do a task that might take a lot of time. We want the user to still be able to interact with the website while other parts of the webpage loads.	1	
Asynchronous programming can be beneficial in JS. This is because it can allow for updating only parts of the page, especially if an update is taking a long time. Async programming is also helpful for server requests when servers are slow.  	9	
It allows programmers to quickly create and load webpages before all functions are complete so that if a function takes a long time to complete, the webpage won't we stuck waiting for its result. This is especially helpful when a long action is being performed like making a fetch request.	1	
It helps us when we are making calls to API's or waiting for things to load on, so that certain parts of the page can be updated when we get the new info that we need and do not need to refresh the whole page. 	0	
We have to wait for data to load, like the response of an API call or fetch. Asynchronous programming allows us to wait until all the data is loaded before execution.	5	
We want to use asynchronous programming in Javascript so that we can run multiple lines of code in the background without interrupting the executions that are already occurring.	3	
Because we want the user to be able to use the loaded portions of the page as soon as possible, and so asynchronous programming in JS let's them do that by having fully-loaded portions be presented/usable while non-loaded (high-cost) portions are loaded/added asynchronously.	0	
We want to use asynchronous programming in Javascript because AJAX allows us to partially update a page without refreshing the whole page. It also allows executing instructions that may take a really long time (e.g. waiting for HTTP responses) without blocking the rest of the code, so users may still interact with the UI.	3	
Asynchronous programming is important to use in JavaScript when data or information should be changed/updated and reflected on the user interface without refreshing the page. This allows for the user to have a smoother interaction with the user interface on the webpage. It involves using the fetch() function and various others in order to get the data from a potential server which holds the data that needs to be updated and directly change the information on the website.	3	
We want to use asynchronous programming to avoid refreshing the page when making changes, and to perform tasks concurrently.	7	
Asynchronous programming allows the program to start and run long tasks without halting the code. This means it can perform other tasks and respond to events without having to wait for the long task to complete	8	
Asynchronous programming is useful in Javascript because it allows for the execution of instructions that may take a long time (e.g. waiting for HTTP responses) without blocking the rest of the code, so that users may still interact with the UI in the meantime.	9	
We want to use asynchronous programming so that we can change a part of the page without having to reload the entire page.	7	
Since Javascript can modify the UI, we want to be able to defer or run code without blocking execution. Asynchronous programming allows us to run slow or time-consuming functions without blocking the main flow of execution.	3	
Asynchronous programming in Javascript allows us to partially update a page without refreshing the whole page. It also allows executing instructions that may take a really long time without blocking the rest of the code, so users may still interact with the UI.	0	
We want to use asynchronous programming so we don't need to run one process after another process and can run them simultaneously	8	
We want to use asynchronous programming in Javascript so that we can execute certain lines of code while waiting on a promise. For example, we may want to change the ui when loading something new, but we still need to execute the load. 	3	
 It allows us execute instructions that may take a really long time without blocking the rest of the code so users can still interact with the UI 	1	
Because we want to change the page without reloading it and send, request, and receive data from a server without blocking the rest of my interface. 	2	
Tasks over the network always have delays. We want the UI to remain responsive when it is completing a network request, which requires asynchronously fetching data so that it doesn't block the execution of the main thread.	4	
Basically, asynchronous program lets us partially update a page without refreshing the entire page while also allowing us to execute instructions that may take a really long time (e.g: waiting for HTTP responses) without blocking the rest of the code, so users can still interact with the UI	7	
Using asynchronous programming is helpful when there are delays in certain functionalities that we must account for. Specifically in the case of API calls, while we are awaiting a response we are able to complete other tasks allowing us to increase overall efficiency. 	5	
One reason is that in JavaScript, there are multple tasks being executed at once at any given time, and it would be extremely slow and inefficient to have to wait for a task to complete before starting another one. With asynchronous programming, you don't have to pause your entire website while a task is being executed.	4	
We want to use asynchronous programming in Javascript because it allows us to execute long-running or resource-intensive tasks without blocking the execution of the rest of the program. This is important because blocking the main thread of execution can lead to poor performance and a poor user experience. Asynchronous programming allows us to run multiple tasks concurrently and handle their results as they become available, improving the overall performance and responsiveness of the program. For example, when making a network request, asynchronous programming allows us to send the request and continue executing other parts of the program while waiting for the response. When the response is received, we can handle it without disrupting the rest of the program. This improves the user experience by making the program more responsive and less likely to appear "frozen" while waiting for a response.	3	
Asynchronous is important in javascript because while the program runs, we want to be able to respond to other events as they happen. We don't want the program to take a potentially long time on a task and then give a delayed response to the event as a result.	9	
We want to use asynchronous programming in JavaScript so that as soon as an action is completed (usually by the user), we can call a corresponding function to respond to that action. Asynchronous programming is usually better for UI development because tasks don't depend on each other sequentially, as they do in synchronous programming.	3	
Asynchronous processing allows for updating only part of the page, especially if update is taking a long time. It's especially helpful for server requests when server is slow 	0	
With synchronous JavaScript, every time we want to update a page we must reload the entire page and create another server connection. With asynchronous programming we can change the page without reloading because we can load data from the server and selectively update parts of a web page without reloading the whole page. 	0	
We want to use async programming because it allows less communication between the server and the user. We can update part of the webpage that is changed instead of refreshing the whole page. 	7	
We want to use asynchronous programming in Javascript is used for to modify the UI of an application so if we have a long synchronous function we will have to wait for the function to finish running for the UI related Javascript to run. So it's important to use Asynchronous programming in Javascript to run non-blocking code. 	3	
We use async programming in JS because if we didn't, all other UI elements would be frozen until the current process is finished. This would not be very user friendly.	3	
We have to wait for certain data to load (i.e. response of api call), so it pauses execution while this data is missing.	4	
A use case for asynch programming in JS is for when we have multiple functions all running at the same time. We still need the UI of that page to be responsive at the same time, which would not be possible with synchronous requests.	3	
Using async programming is essential in JS because user input is a fundamental part of the program interaction and humans work at a distinctly separate operating speed. An async model allows for the computer to execute only when input is received.	9	
It can take time to query certain items, such as calling APIs. We don't want to be bottlenecked by this possibly time-consuming process, so asynchronous programming allows us to do tasks simultaneously.	8	
We want to use asynchronous programming because it allows the page to wait for responses before displaying information (with promises), delay code (scheduling), and more which greatly increases the capabilities of the website as with many parts of code, we do not want them to execute immediately.	5	
Asynchronous programming in Javascript allows for the part of the page to change without reloading it. It also sends, requests, and receives data from a server without blocking the rest of the interface.	0	
We can still use other features when running long-running task. We do not need to wait until the task finished. We can also partially update the page without refreshing the page. 	4	
Asynchronous programming gives one the ability to partially refresh a section of a page without needing to refresh the whole page, which is useful in saving time and processing power, as when changes are made, the whole page does not need to be reloaded. Only a part of the page needs to be refreshed, the part that was changed. The program can also perform other tasks while part of the page is being refreshed. 	7	
We want to be able to send, request, and receive data from a server without blocking other parts of the interface	2	
This allows us to not interrupt the entire interface when the user prompts the website to make calls to a server. It can run in the background while the user can still interact with the interface.	1	
In cases where a function or something takes a long time to complete, such as making an HTTP request, we want to use asynchronous programming so that the program doesn't get blocked waiting for a response and can continue to run.	5	
We can change a page without reloading it and send, request, and receive data from a server without blocking the rest of your interface.	2	
Asynchronous programming allows us to update part of a webpage without having to reload it. This is faster and less resource intensive than reloading the entire page. 	0	
A technique that enables your program to start a potentially long-running task and still be able to be responsive to other events while that tasks runs, rather than having to wait until that tasks has finished It makes the website faster and provides a user with a better experience because they don't have to wait until one task to run for another one to show up 	6	
Asynchronous programming lets us run tasks independently from other tasks, so we don't have to wait for the task to finish to keep using the program. This is useful for tasks that take a long time, or ones that could be waiting on input for some time.	8	
Asynchronous programming in javascript allows for the adaptation of specific segments of the web page in which the other elements of the page are still interactable. I.E. the user does not need to wait for functions to be processed and can complete other tasks and interact with the webpage while the asynchronous task is completed.	9	
Since this allows us to partially update a page without refreshing the whole page. This also means we can execute instructions that may take a really long time (e.g. waiting for HTTP responses) without blocking the rest of the code, so users may still interact with the UI.	1	
Asynchronous programming allows for a program to continue executing while other operations are performed in the background. This can be useful for allowing a program to continue running without getting stuck or blocked waiting for a long-running operation to complete. For example, in a web application, using asynchronous programming can prevent the user interface from becoming unresponsive while the program is waiting for a network request to complete.	8	
We want to execute some instructions without blocking other lines of code. 	4	
What asynchronous programming offers for javascript is to allow for us to take user input and wait for it, and then also perform faster.	3	
We use asynchronous programming in javascript because it allows us to update specific parts of the page without having to reload the whole page. Also, it allows the program to run multiple tasks at the same time while still being responsive to input.	9	
Asynchronous programming enables your program to start a potentially long-running task and still be able to be responsive to other events while that task runs, rather than having to wait until that task has finished. This is especially useful since there is latency across the internet. 	8	
asynchronous programming prevents a single long operation from slowing the entirety of program down. When this style, other code can execute while waiting. 	4	
We want to use asynchronous programming in Javascript when we have the promise to resolve and also want to resolve other operations. To not cause the lag and enable multiple processes to run where some process might take a lot longer than others, we use asynch programming in JS. 	3	
1. It enables me to change a page without reloading it. 2. It enables me to send, request and receive data from a server without blocking the rest of my interface.	2	
Because Javascript is often used to respond to user input. We need a way to respond to this input while also potentially doing different jobs in the background. asynchronous programming allows us to do this.	4	
 Because asynchronous programming allows us to partially update a page without refreshing the whole page. It also allows executing instructions that may take a really long time without blocking the rest of the code, so users may still interact with the UI. 	7	
 AJAX allows us to partially update a page without refreshing the whole page every time. It also allows executing instructions that may take a long time without preventing rest of the code such that UI is still interactable. 	0	
Asynchronous programming helps us run multiple tasks simultaneously. 	8	
Asynchronous programming in Javascript allows us to partially update a webpage without having to refresh the whole page. Additionally, it allows us to execute instructions that can take a long time to execute such as waiting for HTTP responses, without blocking the rest of the code, which allows users to still interact with the user interface.	0	
AJAX allows us to partially update a page without refreshing the whole page. It also allows executing instructions that may take a really long time like waiting for HTTP responses without blocking the rest of the code so users may still interact with the UI.	0	
We want to use asynchronous programming because it allows the user to interact with other aspect of the page while we wait for a response from the server. The user experience is not limited by the speed of the server in asynchronous programming. 	5	
Asynchronous programming allows us to program the flow of actions based on events or messages rather than in a sequential order of code. This is especially useful in Javascript as we may be waiting for user actions and/or API responses, and must delay the execution of our code until we get this data. 	5	
Asynchronous programming in JS enables us to change a page without reloading it, as well as send, request, and receive data from a server without blocking the rest of our interface. 	0	
Helps with performing long task while still being responsive to other events  instead of having to wait for the first long task to finish before running other events. Overall, asynchronous programming in Javascript helps with improving the performance and responsiveness the program.	9	
This is because it allows for some of the parts of a page to update while others remain the same.	1	
You want to use asynchronous programming because it lets your program complete tasks in the background while other things are going on, so as not to stall your entire program.	8	
There are several reasons: 1, We want to update only part of the page without reloading the entire page. 2, We can make request and receive the data we want without blocking the rest of other operations. 	1	
Asynchronous programming is useful in Javascript because it allows us to efficiently run several independent tasks at once without waiting for a return value. This also hase the benefit of partially preventing timeouts by guaranteeing a return value from certain functions.	9	
It allows multiple tasks to be completed without having to wait on a task that might take longer than the others.	6	
Asynchronous javascript allows us to update some parts of a webpage asynchronously without reloading the entire webpage. 	0	
We use asynchronous programming because it allows us to send, request, and receive data from a server without blocking the interface from the user.	5	
We would want this as asynchronous programming would enable us to start long-running tasks while still being responsive to other events, rather than wait for each task to finish individually.	8	
In web pages, especially large ones, asynchronous programming is important because it does not require the entire page to be reloaded, but only the parts that are changed. This selective updating saves time and allows the webpage to run efficiently, rather than running line by line and waiting for all functions to execute and reloading the entire page.	0	
Asynchronous programming allows us to send, request, and receive data from a server without blocking the rest of the interface, allowing users to continue interacting with the UI. 	5	
Asynchronous programming in JS allows us to fetch data that is used for some part of the page from servers without blocking the rendering of the rest part of the page.	3	
It enables more dynamic change for users without reloading using webpages. For example, AJAX is used to enable Asynchronous Javascript and XML and it enables you to change a page without reloading as it can send, request, and receive data without immediately reloading the page. This way the user can have a quicker and more streamlined experience on a webpage.	1	
In javascript, several things may be happening at once. With asynchronous programming, we can update and use different features while others may still be loading, this way the page doesn't have to wait for large elements to load to begin displaying.	0	
So we can run multiple tasks on a website instead of having to wait for one task to finish before we start another	6	
Asynchronous programming enables users to maintain their control on the page when there is a ongoing task that is going to take relatively long time to run.	7	
AJAX lets us to partially update a page without refreshing the entire page. It can allow executing of instructions that may take a really long time such as HTTP responses without blocking the rest of the code, so users may still interact with the UI.	0	
It allows changing a page without reloading it and makes it possible to send, request, and receive data without blocking the rest of the interface.	2	
We want to use asynchronous programming in Javascript so it can run the task in the background while continuing to be responsive to other events. This is so that we don't have to wait for the task to finish before doing something else.	3	
Asynchronous programming in Javascript allows the program to start a potentially long-running task and still be able to be responsive to other events while that task runs, rather than having to wait until the task has finished	9	
asynchronous programming prevents the system from having to wait on one task to be finished before beginning the next one. It essentially allows a program to perform multiple tasks concurrently. A program can run other code while waiting for another section to run. This is useful since in web systems there is usually some form of latency.	8	
Asynchronous programming allows tasks that take a longer time to be asynchronously answered while executing more immediate code. This means code doesn't have to be blocked, drastically increasing overall efficiency.	4	
We would want to use asynchronous programming in Javascript because it enables users to change the page without reloading the entire page. Also, you can send, request, and receive data from a server without blocking the rest of your interface.	0	
We want to use asynchronous programming because it allows us to continue performing actions if one may take very long. For instance, we can partially update a page without refreshing the whole page and it allows us to execute lines of code that may take a long time (such as a GET request) without blocking other code to allow users to continue using the site.	5	
You can be respond to other tasks while you're waiting on a big task to run, which allows for more efficient programming to execute. 	4	
Asynchronous programming allows for "promises," essentially while performing an action (e.g. fetching data), asynchronous programming allows for the program to not freeze while this is occurring, it fetches it in the background or rather, asynchronously 	5	
Asynchronous programming in Javascript allows us to partially update a page without refreshing the whole page and execute instructions that may take a really long time.	0	
Asynchronous programming allows us to start a potentially long-running task and still be able to be responsive to other events while that task runs. This way, we can send, request, and receive data from a server without blocking the rest of the interface and only requires a partial page refresh.	7	
We want to use asynchronous programming in Javascript because it allows us to control the flow of execution of our program by allowing multiple tasks to be executing concurrently. Asynchronous code can be run on the side of the main program, which is particularly beneficial for programs that may need to access multiple data sources at once or perform multiple operations at once. This also improves overall efficiency and response time of a program.	3	
Because it allows us to execute instructions that might take a long time from a server without blocking the rest of the interface and allows users to interact with the UI.	1	
We want to use asynchronous programming because some operations have latency (GET request over a network). We don't want this to block other code that powers the interface, thus we use asynch programming so that we are not blocked by operations that have latency and can be parallelized.	5	
Using asynchronous programming allows us to partially update a page without refreshing the whole page. It also allows executing instructions that may take a really long time without blocking the rest of the code, so users may still interact with the UI.	7	
Asynchronous programming allows a program to run a task while be able to wait response of uncompleted task. Therefore it allows us to run the code without blocking the rest of the code. So, we can only load a part of page. 	7	
We want to use asynchronous programming in JavaScript to change a page without reloading it. It also allows executing instructions that may take a really long time without blocking the rest of the code, so users may still interact with the UI. We can also send, request, and receive data from a server without blocking the rest of the user interface.  	0	
We want to use asynchronous programming to allow us to update parts of a webpage without reloading the entire page. With asynchronous programming we can send, request and receive data without blocking the rest of the interface.	7	
We want to use asynchronous programming because we can do multiple tasks at the same time (ex. loading data and webpage), rather than waiting for one long task to complete before doing another (data loading before webpage can).	5	
This is because we cannot determine when the users would interact with things and what they would try to interact with. With these variables, it is best to code in asynchronous programming as this eliminates the need to design major intertwined systems with hardcoded data sets and can cover much more scenarios regarding user inputs.	4	
Because sometimes we want to partially update a page without refreshing the whole page. In addition, we also want to be able to execute instructions that may take a long time (i.e. waiting for the response) without blocking the rest of the code, so the users can interact with the UI.	1	
Asynchronous programming enables us to update a page or parts of the web page without reloading the whole page. It sends, requests, and receives data from a serve without blocking the rest of the interface.	7	
The reason why we want to use asynchronous programming is because JavaScript can modify doms element and UI and so if we have a long synchronous UI, you don't want any sync elemetns to take long when you are making on the fly changes and so no UI changes can happen until its done. 	3	
Since it enables your program to start a potentially long-running task and still be able to be responsive to other events while that task runs, rather than having to wait until that task has finished	6	
Asynchronous programming allows for Javascript to handle multiple tasks simultaneously. It can allow for the program to run more efficiently, as Javascript can continue to run and handle other tasks if another one is slow or blocked.	9	
Asynchronous programming helps us to update a page or parts of the web page without reloading the whole web page. It sends, requests, and receives data from a server without blocking the rest of the interface, so that it can load object after the page established.	7	
So that we can change a page without reloading and send, request and receive data from a server while other parts of the interface function well.	2	
Asynchronous programming in Javascript enables a page to change without reloading the whole page. It also allows us to send, request, and receive data from a server without blocking the rest of the interface.	0	
First, we can change a page without reloading it. Second, we can send, request and receive data from a server without blocking the rest of your interface. Asynchronous programming enables your program to start a potentially long-running task and still be able to be responsive to other events while that task runs, rather than having to wait until that task has finished.	7	
asynchronous programming allows other programs to run in the background while we wait for time extensive tasks (such as API calls). This makes our program more efficient. 	8	
For Synchronous programming, we have to reload the whole page for update. However, if we use asynchronous programming in Javascript, it allows to update only part of a page.	0	
Because it's difficult to manage responses from multiple asynchronous function and we want to execute other lines of code without blocking.	4	
Because it is a means of loading data from the server and selectively updating parts of a web page without loading the whole page over and over again	1	
because using async allows us to change a page without reloading the entire the page. it can send requests and fetch data without blocking the rest of your interface.	2	
Asynchronous programming allows us to execute instructions that may take a long time without blocking the rest of the code.	4	
We want to be able to make changes to a page without reloading it every time. We also want to send, request, and receive data from a server without blocking the interface. 	2	
We want to be able to use asynchronous programming in javascript because some tasks take longer than others and we want to ensure that one task doesn't block the user from interactive with the app unless necessary. Async programming allows us to handle multiple tasks at once instead of waiting for a task to finish to proceed.	3	
Asynchronous programming is useful because it allows your program to handle multiple tasks at the same time, instead of executing them all at once. It also enables us to sidestep certain tasks being blocked or delayed from being executed that can occur in synchronous programming, so it can improve efficiency too. 	8	
Asynchronous programming allows us to add responsiveness, letting us run programs on the webpage without making it stop.	7	
Async programming allows long running operations to happen while allowing the rest of the app to remain unblocked	4	
Because we want to enable users to interact with the UI as usual while some functions may take longer time to execute. With asynchronous programming, those functions taking longer time to execute will not block the execution of the rest codes.	4	
The use of asynchronous programming in Javascript is beneficial because it allows us to run tasks that take a very long time to process while remaining responsive to other smaller or shorter tasks without having to wait for the main long task to finish, hence increasing efficiency. 	9	


Asynchronous programming in Javascript allows the program to continue running and to execute other tasks while waiting for a long-running operation to complete. It also allows us to change a page without reloading it and also send, request and receive data from a server without blocking the rest of your interface.	0	
AJAX allows us to partially update a page without refreshing the whole page as well as execute instructions that will take an unknown amount of time without blocking the rest of the code.	0	
It allows us to partially update a page instead of needing to reload the page every time an action is done. It also allows users to continue to use the page while a long action is being done asynchronously.	1	
Since this allows us to partially update a page without refreshing the whole page. This also means we can execute instructions that may take a really long time (e.g. waiting for HTTP responses) without blocking the rest of the code, so users may still interact with the UI.	1	
It enables changing a page without reloading it and it allows us to send, request, and receive data from a server without blocking the rest of the interface.	2	
1. It enables me to change a page without reloading it. 2. It enables me to send, request and receive data from a server without blocking the rest of my interface.	2	
We want to use asynchronous programming in Javascript so lines of code execute in a specific order and ensure it is executed based on previous results. For example, when calling an API, we want to use asynchronous programming for the code to wait for the data to be returned before working with the data.	3	
We want to use asynchronous programming in Javascript because it allows the program to run more efficiently as it will run other tasks while waiting for a response from something else. The application can send, request, and receive data from a server without blocking the rest of the interface from loading. 	3	
Asynchronous programming allows tasks that take a longer time to be asynchronously answered while executing more immediate code. This means code doesn't have to be blocked, drastically increasing overall efficiency.	4	
When writing web apps, we often read and write to a server which takes time. To make sure each function has completely finished running, we need to wait for each function. Otherwise, if we execute in real time (synchronous) we may not get desired output.  As an example, consider an app that writes a to-do list to a server. We want to add an item to the list and then print the list. Adding an item may take more time than printing. So, if asynchronous programming is not used the list that is printed will be the list before the new item was added which is not the desired output.	4	
We want to use asynchronous programming because it allows us to continue performing actions if one may take very long. For instance, we can partially update a page without refreshing the whole page and it allows us to execute lines of code that may take a long time (such as a GET request) without blocking other code to allow users to continue using the site.	5	
Asynchronous programming allows us to not block the rest of the interface when sending, requesting, and receiving data from a server.	5	
It allows for other tasks to be done while a larger task is processing in the background rather than having a task stop the program.	6	
It allows multiple tasks to be completed without having to wait on a task that might take longer than the others.	6	
Asynchronous programming allows for us to partially refresh the page rather than a full refresh and allows instructions that may take a long time to execute without blocking the rest of the code.	7	
Asynchronous programming allows us to partially update a page without refreshing the whole page and prevents us from waiting a long time for executing instructions and  blocking the rest of the code, so that users may still interact with the UI.	7	
Asynchronous programming allows our program to start tasks that may be very long while still running tasks of other things so we don't have to wait for one after each other.  	8	
Asynchronous programming allows multiple tasks to be executed concurrently, and not blocking the main execution thread.	8	
Asynchronous programming is useful in Javascript because it allows us to efficiently run several independent tasks at once without waiting for a return value. This also hase the benefit of partially preventing timeouts by guaranteeing a return value from certain functions.	9	
Asynchronous is important in javascript because while the program runs, we want to be able to respond to other events as they happen. We don't want the program to take a potentially long time on a task and then give a delayed response to the event as a result.	9	
