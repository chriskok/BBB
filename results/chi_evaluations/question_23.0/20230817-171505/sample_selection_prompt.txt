RUBRICS - OUTLIER SCORE

1. Understanding of Asynchronous Programming: The answer should showcase a deep understanding of asynchronous programming, its features, and how it works in Javascript. 

2. Reasoning: The student clearly explains why we would want to use asynchronous programming in Javascript. The answer should detail how asynchronous programming provides a non-blocking way to execute code, improving efficiency and performance. 

3. Application Examples: The answer should include specific examples of when and where asynchronous programming in Javascript can be used and how it improves those situations, like handling IO-bound operations, call-backs, or event-driven programming.

4. Knowledge of Tools: The student should demonstrate knowledge of Javascript tools used for asynchronous programming, like Promises, Callbacks, Async/Await functions.

5. Explanation Clarity: The answer should be well-organized and easy to understand, using proper terminology and language suitable for discussing complex programming concepts.

---------------------------------------------------------------------------

THEMES - OUTLIER SCORE

1) Asynchronous programming helps manage complex processes in Javascript: This theme covers student answers discussing how asynchronous programming enables managing and controlling processes that are complex and require significant computational resources.

2) Enhancement of application performance: Many students pointed out that asynchronous programming in JavaScript allows tasks to be executed simultaneously, which can lead to an improvement in application performance.

3) Efficient use of resources and time: This theme relates to answers that emphasize how asynchronous execution allows for a more efficient utilization of system resources and optimizes the time needed for execution by running tasks in parallel.

4) Avoidance of blocking operations: Students commonly mentioned how asynchronous programming allows the avoidance of blocking operations to ensure smooth operation, by not having to wait for data to load or a function to be executed.

5) Improved user experience: This theme highlights the idea that asynchronous programming leads to a more responsive and better user interface, which ultimately enhances the user’s experience.

---------------------------------------------------------------------------

RUBRICS - FURTHEST FROM MEAN

1. Understanding the concept: The student should clearly demonstrate a comprehension of what asynchronous programming is in Javascript. 
2. Explaining the benefits: The student should explain the advantages of using asynchronous programming, such as non-blocking code, more efficient use of system resources and a more responsive user experience.
3. Application scenarios: The answer should provide practical examples or scenarios where asynchronous programming in Javascript is beneficial or necessary.
4. Comparison with synchronous programming: The student might demonstrate a deeper understanding by comparing asynchronous programming with synchronous programming in JavaScript and describing why asynchronous approach might be better in some scenarios.
5. Clarity and structure: The answer should not only be technically correct but also well-structured and clear, easy for the reader to understand.

---------------------------------------------------------------------------

THEMES - FURTHEST FROM MEAN

1. Advantages of Asynchronous Programming: Many students focused on describing the benefits of asynchronous programming in Javascript such as better performance, efficiency, and a better user experience.
2. Non-blocking Code: Several answers touched upon how asynchronous programming allows the browser to continue working on other tasks while waiting for a task to complete, thus preventing the blocking of code execution.
3. Program Flow: Some students emphasized synchronous programming’s disadvantageous effect on program flow and contrasted it with the smoother flow of operations in asynchronous programming.
4. Promises & Callback Function: A recurrent theme was about the concept of Promises and how it is an integral tool in asynchronous programming, and the use of callback functions for handling asynchronous operations.
5. Real-world Applications: A number of students utilized real-world examples or analogies to explain the concept, such as loading elements on a webpage or making API calls.

---------------------------------------------------------------------------

RUBRICS - CLOSEST TO MEAN

1) Understanding the Concept: The student should accurately explain the basic concept of asynchronous programming in Javascript.

2) Effectiveness and Efficiency: The response should convey how asynchronous programming can help make applications more effective and efficient by performing multiple tasks simultaneously.

3) User Experience: Mentioning the improvement of user experience through asynchronous programming by non-blocking operations should be a part of the evaluation criteria.

4) Real-world Examples: Providing real-world examples where asynchronous programming is beneficial to support their answer can earn points.

5) Technical Depth: The use of appropriate technical terminology and concepts such as callbacks, promises, async/await should be incorporated in the answer.

---------------------------------------------------------------------------

THEMES - CLOSEST TO MEAN

1) Identification/Understanding of User Needs: Several students mention the significance of user research in understanding the unique needs, behavior, and problems of a user during the early life cycle of a product. 

2) Ideation and Generating Potential Solutions: User research appears to be crucial during the ideation phase, aiding in the validation of design decisions and the development of potential solutions to address identified user needs.

3) Feedback on Proposed Solutions: Students discuss user research as a method of garnering feedback on potential solutions to ensure they align with user's needs. 

4) Prototyping and Testing: A recurrent theme is the role of user research in prototyping and testing stages. It serves to uncover usability issues, validate prototypes with real users, and help make iterative improvements based on user feedback.

5) Post-Release or Implementation Analysis: Some students state that user research can also be used after the product has been released for assessing product effectiveness, gathering insights on user interactions, and identifying areas of improvement for future updates.

---------------------------------------------------------------------------

RUBRICS - CLUSTER 10

1. Understanding of Asynchronous Programming Concept: The answer should clearly articulate the concept of asynchronous programming and its importance in JavaScript. This includes mentioning how it enables the execution of non-blocking operations, allowing the script to run without interruption.

2. Addressing the User Experience: The rubric should look for answers that correctly explain the improvement to the user experience, such as reduced loading times and improved responsiveness on the browser.

3. Mentioning Specific Asynchronous Techniques: User should not only know what asynchronous programming is but also be aware of the specific techniques used in Javascript, including callbacks, promises and async/await. 

4. Knowledge of Potential Pitfalls: The answer should also mention potential downsides/pitfalls to using asynchronous programming if not handled properly, i.e. callback hell, error handling in promises, etc.

5. Structure, Organization and Clarity: Regardless of the depth of answer, the student’s response should be clearly structured and well organized, with all concepts explained clearly.


---------------------------------------------------------------------------

THEMES - CLUSTER 10

1. Understand User Needs: Students often mentioned the importance of using user research to identify and understand user needs, requirements, and problems. This understanding is crucial for the development of effective digital products.

2. Generate Possible Solutions: Another recurring theme is the use of user research to brainstorm and generate possible solutions. This helps identify the most appropriate design and functionality features to meet the users' needs.

3. Prototype Testing: Many students underlined the role of user research in testing prototypes. Feedback received at this stage can help improve design, eliminate any usability issues, and ensure the final product meets user expectations.

4. Validate Decisions: Validation of design decisions through user research was another common element. Students often noted that this helps ensure a product's effectiveness and usability, minimizing the risk of failure or user dissatisfaction.

5. Uncover User Behaviors and Mental Models: Understanding the user's psychology, behaviors, and mental models is another aspect emphasized. This information can inform the design process and improve the overall user experience.

---------------------------------------------------------------------------

RUBRICS - CLUSTER 20

1. Understanding of Asynchronous Programming Concept: The student should understand and explain accurately what asynchronous programming in Javascript is. They should be able to contextualize the term and differentiate it from synchronous programming.

2. Knowledge of Non-Blocking Behavior: The response should establish the non-blocking behavior of asynchronous programming and how it allows other parts of the code to continue executing without waiting for the previous computations to complete.

3. Explanation of Increased Efficiency: The answer should explain how asynchronous programming leads to increased efficiency in Javascript runtime. A student must refer to how this technique prevents sluggish performance or freezing of User Interface.

4. Application Examples: The response should ideally incorporate specific examples, such as handling HTTP requests, reading files, or any other input/output (I/O) operations. These examples should illustrate the use of asynchronous programming in real-life scenarios.

5. Correct Usage of Technical Terminology: The answer should make use of appropriate technical terms associated with asynchronous programming or Javascript, such as Callback Functions, Promises, or async/await. Spelling and grammar should also be taken into account.

---------------------------------------------------------------------------

THEMES - CLUSTER 20

1. Understanding User Needs: Students consistently mentioned the importance of understanding the users' needs, problems, preferences, and behaviors as a primary reason for the use of asynchronous programming in Javascript.

2. Idea Validation: Many students emphasized the role of asynchronous programming in validating ideas and assumptions about certain designs or features. They stated that it allows testing of potential solutions to ensure that they solve user needs effectively.

3. Prototype Testing/Usability: A significant number of responses highlighted the use of asynchronous programming for testing prototypes, identifying potential usability issues, and working towards their improvement.

4. Improvement of User Experience: Some students stressed upon the need for asynchronous programming as a tool to create designs that are easy and pleasurable to use, consequently enhancing the user experience.

5. User Feedback for Iteration: Few responses pointed out how asynchronous programming helps in garnering user feedback for successive iteration and improvement of the product.

---------------------------------------------------------------------------

